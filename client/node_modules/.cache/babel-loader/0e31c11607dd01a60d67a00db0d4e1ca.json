{"ast":null,"code":"import _objectSpread from \"/home/psihoz/todo-app-back/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport TodosAPI from '../api/TodosAPI';\nconst CLEAR_TASKS = 'CLEAR_TASKS';\nconst ADD_TASK = 'ADD_TASK';\nconst REMOVE_TASK = 'REMOVE_TASK';\nconst SET_TASKS = 'SET_TASKS';\nconst EDIT_TASK = 'EDIT_TASK';\nconst TOGGLE_IS_ACTIVE = 'TOGGLE_IS_ACTIVE';\nconst initialState = {\n  tasks: []\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SET_TASKS:\n      {\n        return _objectSpread({}, state, {\n          tasks: action.tasks\n        });\n      }\n\n    case ADD_TASK:\n      {\n        return _objectSpread({}, state, {\n          tasks: [...state.tasks, action.task]\n        });\n      }\n\n    case EDIT_TASK:\n      {\n        let newTasks = [...state.tasks];\n        newTasks = newTasks.map(task => {\n          let newTask = _objectSpread({}, task);\n\n          if (newTask.id === action.task.id) {\n            newTask = action.task;\n          }\n\n          return newTask;\n        });\n        return _objectSpread({}, state, {\n          tasks: newTasks\n        });\n      }\n\n    case REMOVE_TASK:\n      {\n        const taskIdx = state.tasks.findIndex(task => task.id === action.task.id);\n        const newTasks = [...state.tasks.filter((elem, idx) => idx !== taskIdx)];\n        return _objectSpread({}, state, {\n          tasks: newTasks\n        });\n      }\n\n    case TOGGLE_IS_ACTIVE:\n      {\n        let newTasks = [...state.tasks];\n        newTasks = newTasks.map(task => {\n          let newTask = _objectSpread({}, task);\n\n          if (newTask.id === action.task.id) {\n            newTask = action.task;\n          } else {\n            newTask.isActive = false;\n          }\n\n          return newTask;\n        });\n        return _objectSpread({}, state, {\n          tasks: newTasks\n        });\n      }\n\n    case CLEAR_TASKS:\n      {\n        return _objectSpread({}, state, {\n          tasks: null\n        });\n      }\n\n    default:\n      return state;\n  }\n});\nexport const addTask = task => ({\n  type: ADD_TASK,\n  task\n});\nexport const removeTask = task => ({\n  type: REMOVE_TASK,\n  task\n});\nexport const toggleIsActive = task => ({\n  type: TOGGLE_IS_ACTIVE,\n  task\n});\nexport const setTasks = tasks => ({\n  type: SET_TASKS,\n  tasks\n});\nexport const editTask = task => ({\n  type: EDIT_TASK,\n  task\n});\nexport const clearTasksState = () => ({\n  type: CLEAR_TASKS\n}); // Thunks\n\nexport const postTask = task => dispatch => {\n  TodosAPI.postTodo(task).then(todo => {\n    const newTask = {\n      id: todo.id,\n      name: todo.name,\n      isActive: todo.isActive,\n      subTasks: todo.subTasks\n    };\n    return dispatch(addTask(newTask));\n  }).catch(err => console.log(err));\n};\nexport const getTasks = () => dispatch => {\n  TodosAPI.getAllTodos().then(data => dispatch(setTasks(data))).catch(err => console.log(err));\n};\nexport const deleteTask = task => dispatch => {\n  TodosAPI.deleteTodo(task).then(() => dispatch(removeTask(task))).catch(err => console.log(err));\n};\nexport const toggleTaskActive = task => dispatch => {\n  const newTask = _objectSpread({}, task);\n\n  newTask.isActive = !task.isActive;\n  dispatch(toggleIsActive(newTask));\n};\nexport const clearTasks = () => dispatch => {\n  dispatch(clearTasksState());\n};\nexport const addSubtask = (task, label) => dispatch => {\n  const newTask = _objectSpread({}, task);\n\n  newTask.subTasks = [...task.subTasks];\n  newTask.subTasks.push({\n    label,\n    isChecked: false\n  });\n  return TodosAPI.editTask(newTask).then(data => {\n    return dispatch(editTask(data));\n  });\n};\nexport const toggleSubTaskChecked = (task, id, isChecked) => dispatch => {\n  const newTask = _objectSpread({}, task);\n\n  newTask.subTasks = newTask.subTasks.map(subTask => {\n    const newSubTask = _objectSpread({}, subTask);\n\n    if (newSubTask.id === id) newSubTask.isChecked = isChecked;\n    return newSubTask;\n  });\n  return TodosAPI.editTask(newTask).then(data => dispatch(editTask(data)));\n};\nexport const removeSubtask = (task, id) => dispatch => {\n  const newTask = _objectSpread({}, task);\n\n  newTask.subTasks = newTask.subTasks.filter(subTask => subTask.id !== id);\n  return TodosAPI.editTask(newTask).then(data => {\n    return dispatch(editTask(data));\n  });\n};","map":{"version":3,"sources":["/home/psihoz/todo-app-back/client/src/redux/navReducer.js"],"names":["TodosAPI","CLEAR_TASKS","ADD_TASK","REMOVE_TASK","SET_TASKS","EDIT_TASK","TOGGLE_IS_ACTIVE","initialState","tasks","state","action","type","task","newTasks","map","newTask","id","taskIdx","findIndex","filter","elem","idx","isActive","addTask","removeTask","toggleIsActive","setTasks","editTask","clearTasksState","postTask","dispatch","postTodo","then","todo","name","subTasks","catch","err","console","log","getTasks","getAllTodos","data","deleteTask","deleteTodo","toggleTaskActive","clearTasks","addSubtask","label","push","isChecked","toggleSubTaskChecked","subTask","newSubTask","removeSubtask"],"mappings":"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","sourcesContent":["import TodosAPI from '../api/TodosAPI';\n\nconst CLEAR_TASKS = 'CLEAR_TASKS';\nconst ADD_TASK = 'ADD_TASK';\nconst REMOVE_TASK = 'REMOVE_TASK';\nconst SET_TASKS = 'SET_TASKS';\nconst EDIT_TASK = 'EDIT_TASK';\nconst TOGGLE_IS_ACTIVE = 'TOGGLE_IS_ACTIVE';\nconst initialState = {\n  tasks: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n\n    case SET_TASKS: {\n      return {\n        ...state,\n        tasks: action.tasks\n      };\n    }\n    case ADD_TASK: {\n      return {\n        ...state,\n        tasks: [...state.tasks, action.task],\n      };\n    }\n    case EDIT_TASK: {\n      let newTasks = [...state.tasks];\n      newTasks = newTasks.map(task => {\n        let newTask = { ...task };\n        if (newTask.id === action.task.id) {\n          newTask = action.task;\n        }\n        return newTask;\n      });\n      return {\n        ...state,\n        tasks: newTasks\n      };\n    }\n    case REMOVE_TASK: {\n      const taskIdx = state.tasks.findIndex(task => task.id === action.task.id);\n      const newTasks = [...state.tasks.filter((elem, idx) => idx !== taskIdx)];\n      return {\n        ...state,\n        tasks: newTasks\n      };\n    }\n    case TOGGLE_IS_ACTIVE: {\n      let newTasks = [...state.tasks];\n      newTasks = newTasks.map(task => {\n        let newTask = { ...task };\n        if (newTask.id === action.task.id) {\n          newTask = action.task;\n        } else {\n          newTask.isActive = false;\n        }\n        return newTask;\n      });\n      return {\n        ...state,\n        tasks: newTasks\n      };\n    }\n    case CLEAR_TASKS: {\n      return {\n        ...state,\n        tasks: null };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport const addTask = task => ({\n  type: ADD_TASK,\n  task,\n});\n\nexport const removeTask = task => ({\n  type: REMOVE_TASK,\n  task,\n});\nexport const toggleIsActive = task => ({\n  type: TOGGLE_IS_ACTIVE,\n  task,\n});\nexport const setTasks = tasks => ({\n  type: SET_TASKS,\n  tasks,\n});\n\nexport const editTask = task => ({\n  type: EDIT_TASK,\n  task,\n});\nexport const clearTasksState = () => ({\n  type: CLEAR_TASKS\n})\n// Thunks\nexport const postTask = task => dispatch => {\n  TodosAPI.postTodo(task)\n    .then(todo => {\n      const newTask = {\n        id: todo.id,\n        name: todo.name,\n        isActive: todo.isActive,\n        subTasks: todo.subTasks,\n      };\n      return dispatch(addTask(newTask));\n    })\n    .catch(err => console.log(err));\n};\nexport const getTasks = () => dispatch => {\n  TodosAPI.getAllTodos()\n    .then(data => dispatch(setTasks(data)))\n    .catch(err => console.log(err));\n};\nexport const deleteTask = task => dispatch => {\n  TodosAPI.deleteTodo(task)\n    .then(() => dispatch(removeTask(task)))\n    .catch(err => console.log(err));\n};\n\nexport const toggleTaskActive = task => dispatch => {\n  const newTask = { ...task };\n  newTask.isActive = !task.isActive;\n  dispatch(toggleIsActive(newTask));\n};\nexport const clearTasks = () => dispatch => {\n  dispatch(clearTasksState())\n}\nexport const addSubtask = (task, label) => dispatch => {\n  const newTask = { ...task };\n  newTask.subTasks = [...task.subTasks];\n  newTask.subTasks.push({\n    label,\n    isChecked: false\n  });\n  return TodosAPI.editTask(newTask)\n    .then(data => {\n      return dispatch(editTask(data));\n    });\n};\n\nexport const toggleSubTaskChecked = (task, id, isChecked) => dispatch => {\n\n  const newTask = { ...task };\n  newTask.subTasks = newTask.subTasks.map(subTask => {\n    const newSubTask = { ...subTask };\n    if (newSubTask.id === id) newSubTask.isChecked = isChecked;\n    return newSubTask;\n  });\n  return TodosAPI.editTask(newTask)\n    .then(data => dispatch(editTask(data)));\n};\n\nexport const removeSubtask = (task, id) => dispatch => {\n  const newTask = { ...task };\n  newTask.subTasks = newTask.subTasks.filter(subTask => subTask.id !== id);\n  return TodosAPI.editTask(newTask)\n    .then(data => {\n      return dispatch(editTask(data));\n    });\n};\n\n"]},"metadata":{},"sourceType":"module"}