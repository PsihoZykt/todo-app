{"ast":null,"code":"import _objectSpread from \"/home/psihoz/todo-app-back/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport TodosAPI from '../api/TodosAPI';\nconst ADD_TASK = 'ADD_TASK';\nconst REMOVE_TASK = 'REMOVE_TASK';\nconst SET_TASKS = 'SET_TASKS';\nconst EDIT_TASK = 'EDIT_TASK';\nconst initialState = {\n  tasks: []\n};\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case SET_TASKS:\n      {\n        return _objectSpread({}, state, {\n          tasks: action.tasks\n        });\n      }\n\n    case ADD_TASK:\n      {\n        return _objectSpread({}, state, {\n          tasks: [...state.tasks, action.task]\n        });\n      }\n\n    case EDIT_TASK:\n      {\n        let newTasks = [...state.tasks];\n        newTasks = newTasks.map(task => {\n          let newTask = _objectSpread({}, task);\n\n          if (newTask.id === action.task.id) {\n            newTask = action.task;\n          }\n\n          return newTask;\n        });\n        return _objectSpread({}, state, {\n          tasks: newTasks\n        });\n      }\n\n    case REMOVE_TASK:\n      {\n        const taskIdx = state.tasks.findIndex(task => task.id === action.task.id);\n        const newTasks = [...state.tasks.filter((elem, idx) => idx !== taskIdx)];\n        return _objectSpread({}, state, {\n          tasks: newTasks\n        });\n      }\n\n    default:\n      return state;\n  }\n});\nexport const addTask = task => ({\n  type: ADD_TASK,\n  task\n});\nexport const removeTask = task => ({\n  type: REMOVE_TASK,\n  task\n});\nexport const setTasks = tasks => ({\n  type: SET_TASKS,\n  tasks\n});\nexport const editTask = task => ({\n  type: EDIT_TASK,\n  task\n}); // Thunks\n\nexport const postTask = task => dispatch => {\n  TodosAPI.postTodo(task).then(todo => {\n    const newTask = {\n      id: todo.id,\n      name: todo.name,\n      isActive: todo.isActive,\n      subTasks: todo.subTasks\n    };\n    return dispatch(addTask(newTask));\n  }).catch(err => console.log(err));\n};\nexport const getTasks = () => dispatch => {\n  TodosAPI.getAllTodos().then(data => dispatch(setTasks(data))).catch(err => console.log(err));\n};\nexport const deleteTask = task => dispatch => {\n  TodosAPI.deleteTodo(task).then(() => dispatch(removeTask(task))).catch(err => console.log(err));\n};\nexport const toggleTaskActive = task => dispatch => {\n  const newTask = _objectSpread({}, task);\n\n  if (!task.isActive) {\n    newTask.isActive = true;\n  } else newTask.isActive = false;\n\n  dispatch(editTask(newTask)); // // Update all todos, because I need to update isACtive in other todos\n  // TodosAPI.editTask(newTask)\n  //   .then(() => TodosAPI.getAllTodos().then(data => {\n  //     return dispatch(setTasks(data));\n  //   }),\n  //   )\n  //   .catch(err => console.log(err));\n};\nexport const addSubtask = (task, label) => dispatch => {\n  const newTask = _objectSpread({}, task);\n\n  newTask.subTasks = [...task.subTasks];\n  newTask.subTasks.push({\n    label,\n    isChecked: false\n  });\n  return TodosAPI.editTask(newTask).then(data => {\n    return dispatch(editTask(data));\n  });\n};\nexport const toggleSubTaskChecked = (task, id, isChecked) => dispatch => {\n  const newTask = _objectSpread({}, task);\n\n  newTask.subTasks = newTask.subTasks.map(subTask => {\n    const newSubTask = _objectSpread({}, subTask);\n\n    if (newSubTask.id === id) newSubTask.isChecked = isChecked;\n    return newSubTask;\n  });\n  return TodosAPI.editTask(newTask).then(data => dispatch(editTask(data)));\n};\nexport const removeSubtask = (task, id) => dispatch => {\n  const newTask = _objectSpread({}, task);\n\n  newTask.subTasks = newTask.subTasks.filter(subTask => subTask.id !== id);\n  return TodosAPI.editTask(newTask).then(data => {\n    return dispatch(editTask(data));\n  });\n};","map":{"version":3,"sources":["/home/psihoz/todo-app-back/client/src/redux/navReducer.js"],"names":["TodosAPI","ADD_TASK","REMOVE_TASK","SET_TASKS","EDIT_TASK","initialState","tasks","state","action","type","task","newTasks","map","newTask","id","taskIdx","findIndex","filter","elem","idx","addTask","removeTask","setTasks","editTask","postTask","dispatch","postTodo","then","todo","name","isActive","subTasks","catch","err","console","log","getTasks","getAllTodos","data","deleteTask","deleteTodo","toggleTaskActive","addSubtask","label","push","isChecked","toggleSubTaskChecked","subTask","newSubTask","removeSubtask"],"mappings":"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","sourcesContent":["import TodosAPI from '../api/TodosAPI';\n\nconst ADD_TASK = 'ADD_TASK';\nconst REMOVE_TASK = 'REMOVE_TASK';\nconst SET_TASKS = 'SET_TASKS';\nconst EDIT_TASK = 'EDIT_TASK';\nconst initialState = {\n  tasks: [],\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case SET_TASKS: {\n      return { ...state, tasks: action.tasks };\n    }\n    case ADD_TASK: {\n      return {\n        ...state,\n        tasks: [...state.tasks, action.task],\n      };\n    }\n    case EDIT_TASK: {\n      let newTasks = [...state.tasks];\n      newTasks = newTasks.map(task => {\n        let newTask = { ...task };\n        if (newTask.id === action.task.id) {\n          newTask = action.task;\n        }\n        return newTask;\n      });\n      return { ...state, tasks: newTasks };\n    }\n    case REMOVE_TASK: {\n      const taskIdx = state.tasks.findIndex(task => task.id === action.task.id);\n      const newTasks = [...state.tasks.filter((elem, idx) => idx !== taskIdx)];\n      return { ...state, tasks: newTasks };\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport const addTask = task => ({\n  type: ADD_TASK,\n  task,\n});\n\nexport const removeTask = task => ({\n  type: REMOVE_TASK,\n  task,\n});\n\nexport const setTasks = tasks => ({\n  type: SET_TASKS,\n  tasks,\n});\n\nexport const editTask = task => ({\n  type: EDIT_TASK,\n  task,\n});\n\n// Thunks\nexport const postTask = task => dispatch => {\n  TodosAPI.postTodo(task)\n    .then(todo => {\n      const newTask = {\n        id: todo.id,\n        name: todo.name,\n        isActive: todo.isActive,\n        subTasks: todo.subTasks,\n      };\n      return dispatch(addTask(newTask));\n    })\n    .catch(err => console.log(err));\n};\nexport const getTasks = () => dispatch => {\n  TodosAPI.getAllTodos()\n    .then(data => dispatch(setTasks(data)))\n    .catch(err => console.log(err));\n};\nexport const deleteTask = task => dispatch => {\n  TodosAPI.deleteTodo(task)\n    .then(() => dispatch(removeTask(task)))\n    .catch(err => console.log(err));\n};\n\nexport const toggleTaskActive = task => dispatch => {\n  const newTask = { ...task };\n  if (!task.isActive) {\n    newTask.isActive = true;\n  } else newTask.isActive = false\n  dispatch(editTask(newTask))\n  // // Update all todos, because I need to update isACtive in other todos\n  // TodosAPI.editTask(newTask)\n  //   .then(() => TodosAPI.getAllTodos().then(data => {\n  //     return dispatch(setTasks(data));\n  //   }),\n  //   )\n  //   .catch(err => console.log(err));\n};\n\nexport const addSubtask = (task, label) => dispatch => {\n  const newTask = { ...task };\n  newTask.subTasks = [...task.subTasks];\n  newTask.subTasks.push({ label, isChecked: false });\n  return TodosAPI.editTask(newTask).then(data => {\n    return dispatch(editTask(data));\n  });\n};\n\nexport const toggleSubTaskChecked = (task, id, isChecked) => dispatch => {\n  const newTask = { ...task };\n  newTask.subTasks = newTask.subTasks.map(subTask => {\n    const newSubTask = { ...subTask };\n    if (newSubTask.id === id) newSubTask.isChecked = isChecked;\n    return newSubTask;\n  });\n  return TodosAPI.editTask(newTask).then(data => dispatch(editTask(data)));\n};\n\nexport const removeSubtask = (task, id) => dispatch => {\n  const newTask = { ...task };\n  newTask.subTasks = newTask.subTasks.filter(subTask => subTask.id !== id);\n  return TodosAPI.editTask(newTask).then(data => {\n    return dispatch(editTask(data));\n  });\n};\n\n"]},"metadata":{},"sourceType":"module"}